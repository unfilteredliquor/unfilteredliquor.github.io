<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[hexo博客部署到云服务器]]></title>
    <url>%2F2019%2F08%2F13%2Fhexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%2F</url>
    <content type="text"><![CDATA[为什么想要部署到云服务器我前边在GitHub上搭建了hexo博客，但是由于访问GitHub Pages访问速度过于感人，所以我决定自己租一个云服务器来搭建hexo博客。 服务器(CentOS)配置服务器环境服务器的配置为1 核CPU、 2 GB内存、 1 Mbps带宽，操作系统为CentOS 7.6。 git配置安装git执行su root指令切换到root用户下，执行yum install -y git指令安装git，执行git --version验证是否安装成功。 添加git用户执行adduser git指令添加用户git，执行passwd git ${password}指令修改git的密码。 配置ssh访问 切换到git用户。 1su git 进入 git用户的主目录。 1cd /home/git 创建.ssh文件夹，如果此文件夹已经存在，请忽略此步骤。 1mkdir .ssh 进入.ssh文件夹，创建authorized_keys文件，用于存放客户端访问的ssh公钥。 12cd .sshtouch authorized_keys 设置权限。 12chmod 700 /home/git/.ssh/chmod 600 /home/git/.ssh/authorized_keys 将客户端公钥复制到authorized_keys文件中。 1vim authorized_keys 创建git仓库 切换到git用户。 1su git 进入git的用户主目录。 1cd /home/git 在目录下创建${repositoryName}.git文件夹。 1mkdir myblog.git 进入${repositoryName}.git文件夹，初始化git仓库。 12cd myblog.gitgit init --bare 至此，服务器git配置基本完成。 nginx配置安装nginx 切换到root用户。 1su root 安装nginx。 1yum install -y nginx nginx服务命令 启动：service nginx start 停止：service nginx stop 重启：service nginx restart 开机自启：systemctl enable nginx 创建网站目录 创建一个文件夹作为网站的根目录。 12su rootmkdir /home/myblog #mkdir /home/$&#123;site-folder&#125; 赋予网站根目录文件夹权限。 1chown git:git -R /home/myblog # chown $&#123;username&#125;:$&#123;folder-name&#125; -R /home/$&#123;site-folder&#125; 配置nginx使用nginx -t命令查看位置，一般为/etc/nginx/nginx.conf。使用 vim /etc/nginx/nginx.conf命令进行编辑，修改配置文件如下： 1234567891011121314151617181920server &#123;listen 80 default_server;listen [::]:80 default_server;server_name $&#123;domain-name&#125;; # 修改为自己的域名root /home/myblog; # 修改为网站的根目录# Load configuration files for the default server block.include /etc/nginx/default.d/*.conf;location / &#123;&#125;error_page 404 /404.html;location = /40x.html &#123;&#125;error_page 500 502 503 504 /50x.html;location = /50x.html &#123;&#125;&#125; 自动化部署在myblog.git裸库的hooks文件夹中，新建post-receive文件。 1vim myblog.git/hooks/post-receive 填入以下内容，其中/home/myblog为网站目录，根据自己的填入，保存退出。 12#!/bin/shgit --work-tree=/home/myblog --git-dir=/home/git/myblog.git checkout -f 保存后，赋予这个文件可执行权限。 1chmod +x /home/git/myblog.git/hooks/post-receive 本地配置hexo配置参考我的上一篇文章。 在自定义位置初始化hexo项目。 123cd desktopmkdir mybloghexo init 修改_config.yml将url指定为自己的域名。 1234url: http://$&#123;domain-name&#125;/root: /permalink: :year/:month/:day/:title/permalink_defaults: 修改 _config.yml将repo指定为自己的仓库地址，发布到的分支默认为master： 1234deploy:type: gitrepo: git@$&#123;domain-name&#125;:$&#123;repositoryName&#125;.gitbranch: master ssh配置通过终端命令创建ssh key 1ssh-keygen -t rsa -C &quot;username@domain.com&quot; 在终端输入open ~/.ssh打开.ssh文件夹，即可看到id_rsa.pub文件。 hexo使用参考我的上一篇文章。 结束欢迎交流，与君共勉。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>centos</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo搭建博客并部署至GitHub Pages详解(macOS)]]></title>
    <url>%2F2019%2F08%2F11%2Fhexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B9%B6%E9%83%A8%E7%BD%B2%E8%87%B3GitHub-Pages%E8%AF%A6%E8%A7%A3(macOS)%2F</url>
    <content type="text"><![CDATA[环境准备安装git 通过homebrew安装如果之前没有安装homebrew，需要先安装homebrew，在终端输入：1/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot; homebrew安装完成之后可以在终端输入brew --version确认是否安装成功，安装成功会显示homebrew的版本： 安装git： 1brew install git 通过Xcode安装直接从AppStore安装Xcode，Xcode集成了Git，不过默认没有安装。运行Xcode，选择菜单“Xcode”-&gt;“Preferences”，在弹出窗口中找到“Downloads”，选择“Command Line Tools”，点“Install”就可以完成安装。 配置git设置username和email（github每次commit都会记录他们） 12git config --global user.name &quot;username&quot;git config --global user.email &quot;username@domain.com&quot; 配置ssh key通过终端命令创建ssh key 1ssh-keygen -t rsa -C &quot;username@domain.com&quot; 在终端输入open ~/.ssh打开.ssh文件夹，打开id_rsa.pub，复制全部内容。登录github，选择Settings-&gt;SSH and GPG keys-&gt;New SSH Key，为新的ssh key命名，将刚才复制的内容粘贴到Key中，然后保存。 创建GitHub Pages仓库Github Pages是面向用户、组织和项目开放的公共静态页面搭建托管服务，站点可以被免费托管在 Github 上，我们可以选择使用 Github Pages 默认提供的域名 github.io 或者自定义域名来发布站点。GitHub Pages分为两类，用户主页和项目主页。我门需要部署的是用户主页。我们需要在GitHub上新建一个仓库，仓库名命为{github-username}.github.io，只有这样才会被识别为用户主页。用户主页是唯一的，可以通过http://${github-username}.github.io进行访问。 安装hexoHexo是使用 Node.js编写的，所以使用 npm 安装： 1npm install hexo-cli -g 完成后执行 hexo -v验证是否正确安装。 部署博客在指定位置建立hexo项目文件夹在自定义位置建立新的hexo项目文件夹。例如在桌面新建文件夹，用cd desktop指令进入桌面之后，用mkdir hexofolder指令建立hexo项目文件夹。 建立hexo项目此处有2种方式可以创建hexo项目： 以本例来说，直接执行以下指令： 123hexo init hexofoldercd hexofoldernpm install 执行以下指令： 123cd hexofolderhexo initnpm install 在创建项目过程中，执行npm install指令时，有可能会遇到audit服务报错，我目前的处理方式是执行npm install指令之前，先执行npm set audit false指令关闭audit服务，然后再执行npm install指令，执行完成之后再执行npm set audit true指令，打开audit服务。 hexo目录结构1234ls_config.yml package-lock.json scaffoldsdb.json package.json sourcenode_modules public themes _config.ymlhexo的配置文件，你可以在该文件中修改自定义配置。 scaffolds hexo 生成新文章的模版文件。 source 保存文章的 Markdown 源文件以及文章中引用的资源文件。 themes 保存hexo主题的源码。 public 生成的静态文件，包括图片、Tags、Categories 等都保存在这里。执行 hexo g 生成；hexo clean 则会删除该文件夹。 GitHub Pages 上部署的项目即该文件夹的内容。 本地预览最开始建立的hexo项目中，有一篇介绍hexo的文章，可以用来测试本地配置是否正确。先执行hexo g指令生成静态文件，然后执行hexo s指令启动本地服务器，然后访问http://localhost:4000即可看到那篇介绍hexo的文章。 部署到GitHub Pages要将hexo部署到GitHub Pages上，我们还需要安装插件和修改配置。 安装插件在项目目录下执行以下指令： 1npm install hexo-deployer-git --save 修改配置修改 _config.yml将repo指定为自己的仓库地址，发布到的分支默认为master： 1234deploy:type: gitrepo: https://github.com/github-username/github-username.github.io.gitbranch: master 之后，执行以下命令即可发布文章： 1hexo d -g 或 1hexo g -d 最后即可通过网址https://${github-username}.github.io访问你的博客了。 项目备份为了防止项目丢失和数据迁移，我们必须对hexo项目进行备份。 在GitHub上新建个人仓库hexo。 在hexo项目目录下执行git init指令初始化git配置。（后续指令都是在hexo项目目录下执行） 执行git remote add hexo https://github.com/github-username/hexo.git指令添加远程仓库。 执行git add -A指令跟踪hexo项目中的所有文件。 执行git commit -m &#39;hexo&#39;指令将hexo项目提交至本地仓库。 执行git push hexo master指令将hexo项目同步至远程仓库master分支。 现在你已经将你的hexo项目备份至GitHub仓库中。你可以不定时将本地的修改同步至GitHub仓库，以免数据丢失或者方便项目迁移。 参考 hexo官网 GitHub Pages官网]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>git</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python爬取铁路站点数据]]></title>
    <url>%2F2019%2F08%2F10%2Fpython%E7%88%AC%E5%8F%96%E9%93%81%E8%B7%AF%E7%AB%99%E7%82%B9%E6%95%B0%E6%8D%AE%2F</url>
    <content type="text"><![CDATA[过段时间填坑]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
</search>
